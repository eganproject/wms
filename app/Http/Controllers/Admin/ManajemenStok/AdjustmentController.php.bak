<?php

namespace App\Http\Controllers\Admin\ManajemenStok;

use App\Http\Controllers\Controller;
use App\Models\Adjustment;
use App\Models\AdjustmentItem;
use App\Models\Inventory;
use App\Models\Item;
use App\Models\StockMovement;
use App\Models\Warehouse;
use App\Models\UserActivity;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use App\Models\Adjustment;
use App\Models\AdjustmentItem;
use App\Models\Inventory;
use App\Models\Item;
use App\Models\StockMovement;
use App\Models\Warehouse;
use App\Models\UserActivity;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;

class AdjustmentController extends Controller
{
    private function generateNewCode()
    {
        $prefix = 'ADJ';
        $date = now()->format('Ymd');
        $latestAdjustment = Adjustment::where('code', 'LIKE', "$prefix-$date-%")->latest('id')->first();

        if ($latestAdjustment) {
            $sequence = (int) substr($latestAdjustment->code, -4) + 1;
        } else {
            $sequence = 1;
        }

        return sprintf('%s-%s-%04d', $prefix, $date, $sequence);
    }

    public function index(Request $request)
    {
        if ($request->ajax()) {
            $searchValue = $request->input('search.value', '');
            $start = $request->input('start', 0);
            $length = $request->input('length', 10);
            $draw = $request->input('draw', 0);
            $statusFilter = $request->input('status');
            $dateFilter = $request->input('date');

            $query = DB::table('adjustments as adj')
                ->leftJoin('warehouses as w', 'adj.warehouse_id', '=', 'w.id')
                ->leftJoin('users as u', 'adj.user_id', '=', 'u.id')
                ->leftJoin('adjustment_items as ai', 'adj.id', '=', 'ai.adjustment_id')
                ->leftJoin('items as i', 'ai.item_id', '=', 'i.id');

            $query = DB::table('adjustments as adj')
                ->leftJoin('warehouses as w', 'adj.warehouse_id', '=', 'w.id')
                ->leftJoin('adjustment_items as ai', 'adj.id', '=', 'ai.adjustment_id')
                ->leftJoin('items as i', 'ai.item_id', '=', 'i.id');

            // Hitung total records sebelum filter
            $totalRecords = DB::table('adjustments')->count();

            if (!empty($searchValue)) {
                $query->where(function ($q) use ($searchValue) {
                    $q->where('adj.code', 'LIKE', "%{$searchValue}%")
                        ->orWhere('adj.adjustment_date', 'LIKE', "%{$searchValue}%")
                        ->orWhere('w.name', 'LIKE', "%{$searchValue}%")
                        ->orWhere('adj.status', 'LIKE', "%{$searchValue}%");
                });
            }

            if ($statusFilter && $statusFilter !== 'semua') {
                $query->where('adj.status', $statusFilter);
            }

            if ($dateFilter && $dateFilter !== 'semua') {
                if (strpos($dateFilter, ' to ') !== false) {
                    [$startDate, $endDate] = explode(' to ', $dateFilter);
                    $query->whereBetween('adj.adjustment_date', [
                        Carbon::parse($startDate)->startOfDay(),
                        Carbon::parse($endDate)->endOfDay()
                    ]);
                } else {
                    $query->whereDate('adj.adjustment_date', $dateFilter);
                }
            }

            // Clone query untuk menghitung total filtered
            $totalFilteredQuery = clone $query;
            $totalFiltered = $totalFilteredQuery->count(DB::raw('DISTINCT adj.id'));

            $data = $query->select([
                'adj.id',
                'adj.code',
                'adj.adjustment_date',
                'adj.status',
                'w.name as warehouse_name',
                DB::raw('GROUP_CONCAT(CONCAT(i.sku, " (Qty:", CAST(ai.quantity AS SIGNED), ")") SEPARATOR ", ") as items_name')
            ])
                ->groupBy('adj.id', 'adj.code', 'adj.adjustment_date', 'adj.status', 'w.name')
                ->orderBy('adj.adjustment_date', 'desc')
                ->offset($start)
                ->limit($length)
                ->get();

            return response()->json([
                'draw' => intval($draw),
                'recordsTotal' => intval($totalRecords),
                'recordsFiltered' => intval($totalFiltered),
                'data' => $data,
            ]);
        }

        return view('admin.manajemenstok.adjustment.index');
    }

    public function show(Adjustment $adjustment)
    {
        $adjustment->load('warehouse', 'adjustmentItems.item', 'user.jabatan');
        return view('admin.manajemenstok.adjustment.show', compact('adjustment'));
    }

    public function create()
    {
        $warehouses = Warehouse::all();
        $items = Item::with('uom')->get();
        $newCode = $this->generateNewCode();
        return view('admin.manajemenstok.adjustment.create', compact('warehouses', 'items', 'newCode'));
    }

    public function store(Request $request)
    {
        $request->validate([
            'code' => 'required|unique:adjustments,code',
            'adjustment_date' => 'required|date',
            'warehouse_id' => 'required|exists:warehouses,id',
            'notes' => 'nullable|string',
            'items' => 'required|array|min:1',
            'items.*.item_id' => 'required|exists:items,id',
            'items.*.quantity' => 'required|numeric',
            'items.*.koli' => 'nullable|numeric|min:0',
            'items.*.uom_id' => 'required|exists:uoms,id',
        ]);

        DB::beginTransaction();
        try {
            $adjustment = Adjustment::create([
                'code' => $request->code,
                'adjustment_date' => $request->adjustment_date,
                'warehouse_id' => $request->warehouse_id,
                'user_id' => auth()->id(),
                'notes' => $request->notes,
                'status' => 'pending'
            ]);

            foreach ($request->items as $itemData) {
                AdjustmentItem::create([
                    'adjustment_id' => $adjustment->id,
                    'item_id' => $itemData['item_id'],
                    'quantity' => $itemData['quantity'],
                    'koli' => $itemData['koli'] ?? null
                ]);
            }

            DB::commit();

            return redirect()->route('admin.manajemenstok.adjustment.index')->with('success', 'Penyesuaian stok berhasil dibuat.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('error', 'Gagal membuat penyesuaian stok: ' . $e->getMessage())->withInput();
        }
    }

    public function edit(Adjustment $adjustment)
    {
        $adjustment->load('adjustmentItems.item');
        $warehouses = Warehouse::all();
        $items = Item::with('uom')->get();
        return view('admin.manajemenstok.adjustment.edit', compact('adjustment', 'warehouses', 'items'));
    }

    public function update(Request $request, Adjustment $adjustment)
    {
        $request->validate([
            'code' => 'required|unique:adjustments,code,' . $adjustment->id,
            'adjustment_date' => 'required|date',
            'warehouse_id' => 'required|exists:warehouses,id',
            'notes' => 'nullable|string',
            'items' => 'required|array|min:1',
            'items.*.item_id' => 'required|exists:items,id',
            'items.*.quantity' => 'required|numeric|min:1',
            'items.*.koli' => 'nullable|numeric|min:0',
            'items.*.uom_id' => 'required|exists:uoms,id',
        ]);

        DB::beginTransaction();
        try {
            $adjustment->update([
                'code' => $request->code,
                'adjustment_date' => $request->adjustment_date,
                'warehouse_id' => $request->warehouse_id,
                'notes' => $request->notes,
            ]);

            $adjustment->adjustmentItems()->delete();
            foreach ($request->items as $itemData) {
                $adjustment->adjustmentItems()->create($itemData);
            }

            DB::commit();

            return redirect()->route('admin.manajemenstok.adjustment.index')->with('success', 'Penyesuaian stok berhasil diperbarui.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('error', 'Gagal memperbarui penyesuaian stok: ' . $e->getMessage())->withInput();
        }
    }

    public function destroy(Adjustment $adjustment)
    {
        DB::beginTransaction();
        try {
            $adjustment->adjustmentItems()->delete();
            $adjustment->delete();
            DB::commit();
            return response()->json(['success' => true, 'message' => 'Dokumen penyesuaian berhasil dihapus.']);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json(['success' => false, 'message' => 'Gagal menghapus dokumen penyesuaian.'], 500);
        }
    }

    public function updateStatus(Request $request, Adjustment $adjustment)
    {
        $request->validate([
            'status' => 'required|in:completed',
        ]);

        DB::beginTransaction();
        try {
            $adjustment->load('adjustmentItems.item');

            if ($request->status == 'completed') {
                $adjustment->completed_at = now();
                
                foreach ($adjustment->adjustmentItems as $item) {
                    $type = ($item->quantity >= 0) ? 'stock_in' : 'stock_out';
                    $absQuantity = abs($item->quantity);
                    $koli = $item->koli ?? 0; // Handle null koli

                    StockMovement::create([
                        'warehouse_id' => $adjustment->warehouse_id,
                        'item_id' => $item->item_id,
                        'date' => now(),
                        'quantity' => $absQuantity,
                        'koli' => $koli,
                        'type' => $type,
                        'description' => 'Penyesuaian stok',
                        'user_id' => auth()->id(),
                        'reference_id' => $item->id,
                        'reference_type' => 'adjustment_items'
                    ]);

                    $inventory = Inventory::firstOrNew([
                        'warehouse_id' => $adjustment->warehouse_id,
                        'item_id' => $item->item_id
                    ]);

                    if (!$inventory->exists && $item->quantity < 0) {
                        throw new \Exception("Tidak dapat mengurangi stok. Stok tidak ditemukan untuk item: " . $item->item->sku);
                    }

                    $inventory->quantity = ($inventory->quantity ?? 0) + $item->quantity;
                    $inventory->koli = ($inventory->koli ?? 0) + $koli;
                    $inventory->save();
                }
            }

            $adjustment->status = $request->status;
            $adjustment->save();

            DB::commit();
            return response()->json(['success' => true, 'message' => 'Status penyesuaian berhasil diperbarui.']);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json(['success' => false, 'message' => $e->getMessage()], 500);
        }
    }
}